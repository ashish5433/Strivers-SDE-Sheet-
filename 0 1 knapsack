int solve(vector<int> &val, vector<int> &wt, int n, int w,vector<vector<int>> &dp){

	if(n==0 || w==0)return 0;

	if(dp[n][w]!=-1)return dp[n][w];
	if(wt[n-1]<=w){
		return dp[n][w]= max(val[n-1]+solve(val,wt,n-1,w-wt[n-1],dp),solve(val,wt,n-1,w,dp));
	}
	else {
		return dp[n][w]=solve(val,wt,n-1,w,dp);
	}
}
int maxProfit(vector<int> &val, vector<int> &wt, int n, int w)
{
	// Write your code here
	int N=1e3+2;
	vector<vector<int>> dp(n+1,vector<int>(w+1,-1));
	return solve(val,wt,n,w,dp);
}
