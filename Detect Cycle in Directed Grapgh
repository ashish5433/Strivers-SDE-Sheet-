#include<bits/stdc++.h>
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  

  int indeg[n+1]={0};
  vector<vector<int>>  adj(n+1);
  for(auto i:edges){
   adj[i.first].push_back(i.second);
   indeg[i.second]++;
  }
 
 queue<int> q;
  
  vector<int> vis(n+1,0);
  for(int i=1;i<=n;i++){
    if (indeg[i] == 0) {
      q.push(i);
      vis[i]=1;
    }
  }
  vector<int> ans;

  while(!q.empty()){
    int node=q.front();
    ans.push_back(node);
    q.pop();
    for(auto i:adj[node]){
      indeg[i]--;
      
      if(indeg[i]==0 && !vis[i]){
        
        q.push(i);
        vis[i];
      };
    }
    
  }
 
 if(ans.size()==n)return 0;
 else return 1;
}
