#include<bits/stdc++.h>

bool bfs(queue<int> &q,vector<int> &vis,vector<int> &color,vector<vector<int>> &adj){

	while(!q.empty()){
		int node=q.front();
		q.pop();
		vis[node]=1;
                if (color[node] == -1) {
                  color[node] = 0;
                }
                for(auto it:adj[node]){
			if(color[it]==-1){
				color[it]=!color[node];
				q.push(it);
			}
			else if(color[it]==color[node])return 0;
		}

	}
	return 1;
}


bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
	int n=edges.size();
	vector<vector<int>> adj(n);
	for(int i=0;i<n;i++){
		for(int j=0;j<edges[0].size();j++){
			if(edges[i][j]){
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}
	vector<int> vis(n,0),color(n,-1);
	queue<int> q;
	
	for(int i=0;i<n;i++){
		if(!vis[i]){
			q.push(i);
			bool ans = bfs(q,vis,color,adj);
			if(!ans)return 0;
		}
	}
	
return 1;


}
