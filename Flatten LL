/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
Node* merge(Node* a,Node* b){

	Node* temp= new Node(0);
	Node* res=temp;

	while(a && b){
		if(a->data<b->data){
			temp->child=a;
			a=a->child;
			temp=temp->child;
		}
		else {
			temp->child=b;
			b=b->child;
			temp=temp->child;

		}
	}
	if(a)temp->child=a;
	else temp->child=b;
	return res->child;
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	
	if(head==NULL || head->next==NULL){
		return head;
	}

	Node* l2=flattenLinkedList(head->next);
	head->next=NULL;
	Node* nhead=merge(head,l2);

	return nhead;
}
