#include <bits/stdc++.h>
bool bfs(int n, vector<pair<int,int>> &vis,vector<int> adj[]){
    vis[n].first=1;
    vis[n].second=n;
    queue<int> q;
    q.push(n);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for(auto i:adj[node]){
          if (!vis[i].first) {
            vis[i].first = 1;
            vis[i].second=node;
            q.push(i);
          }
          else if(vis[i].first && vis[node].second !=i)
              return 1;
          }
        }

    
    return false;
}



string cycleDetection (vector<vector<int>>& e, int n, int m)
{
    // Write your code here.
    vector<int> adj[n+1];
    for(int i=0;i<e.size();i++){
        adj[e[i][0]].push_back(e[i][1]);

        adj[e[i][1]].push_back(e[i][0]);
    }

    vector<pair<int, int>> vis(n + 1, make_pair(0,0));

    for(int i=1;i<=n;i++){
        if(!vis[i].first){
            
            if(bfs(i,vis,adj))return "Yes";
        }
    }
    return "No";
}
